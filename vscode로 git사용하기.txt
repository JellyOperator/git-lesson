왜 git을 사용해야 할까요?
코드를 짜다가 실수해서 2일 전으로 돌아가고 싶거나
코드를 짠 과거 타임라인 등을 보기 위해서는
1. 매일매일 손수 파일 복사본을 만들어두거나
2. git과 같은 형상관리 프로그램을 사용하는 방법이 있습니다. 


(시작)
폴더를 우클릭해서 파워셀을 엽니다.
git --global user.email "설정할 이메일" //폴더의 이메일을 설정해 줍시다.
git --global user.name "내 이름" //마찬가지로 이름을 설정해 줍시다.

을 통해 기본 설정을 마칩니다;


(연습)
이제는 폴더를 우클릭 해서 vsCode를 열어봅시다.

코드가 맘에 들어서 따로 기록을 해두고 싶다고 생각해 봅시다.
그럼 git에 "이 파일의 현재 상태를 기록해줘~" 라고 해야 하겠죠?


(주로 쓰는 과정)
[작업 폴더 (>> git add >>) Staging Area (>> git commit >>) 저장소 Repository]

pull // git에 저장된 내용을 가져옵니다.


(바로 해봅시다!!)
git add 파일명 //수정된 파일을 추가합니다.
git commit -m '메세지' //해당 add에 메모를 추가해봅시다. (어떤 내용인지, 무슨 연유로 add를 하였는지)

형상관리를 통해 우리는 조선의 사관을 직간접적으로 체험해 보는겁니다!
앞으로의 우리가 만들어낼 역사가 git을 통해 기록되겠군요.

(사실 "기록"보다는 "버전생성"이라고 부르는 경우가 더 많아요!)



※다른 명령어들
git add 파일명1 파일명2 //여러 파일을 동시에 스테이징

git add . //모든 파일을 스테이징 (작업 폴더 내)

git status //지금 변경된 파일, 스테이징된 파일 등을 알려줍니다.

git restore (--staged 파일명) //스테이징된 파일을 취소합니다. (.을 찍으면 어떻게 될까요? )

git log (--all --onelinie --graph) //커밋 기록을 파악합니다. (그래프는 그래프로 그려줍니다.)
                                    //단 입력 후에 VIM이 켜져서 j,k로 위아래 스크롤이 가능하고
                                    //q 키로 종료합니다.

git diff //최근 commit과 현재파일의 차이점을 보여줍니다. (Vim이 켜집니다.)

git difftool //위와 같은 기능이지만 시각적으로 향상된 상태로 보여줍니다 (Vim이 켜집니다.)

git difftool ??커밋아이디?? //현재파일과 특정 커밋을 비교가능합니다.    
                ㄴ git log에서 나오는 ea46f1b와 같은 노란색 글씨

git difftool 커밋아이디1 커밋아이디2 //설명 생략


---
git config --global diff.tool vsCode
git config --gloabal difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE
//difftool을 사용할 때 VIM에디터를 vs에디터로 보여줍니다.

[근데 이런거 필요없이]
EXTENSION 툴에 Git Graph같은거 설치하면 gitdiff 대신 사용가능 (보여주는 용도이기 때문)
이럼 굳이 difftool 사용 안해도 됨


(2일차)
git branch 브랜치명 //브랜치 생성해줌 
git switch 브랜치명 //브랜치로 이동 //main 아님 master를 사용하면 처음 자리로 돌아감
